/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as MainRouteRouteImport } from './routes/_main/route'
import { Route as MainIndexRouteImport } from './routes/_main/index'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as MainProfileRouteImport } from './routes/_main/profile'
import { Route as MainAboutRouteImport } from './routes/_main/about'
import { Route as MainSlidersIndexRouteImport } from './routes/_main/sliders/index'
import { Route as MainOwnerIndexRouteImport } from './routes/_main/owner/index'
import { Route as MainNotificationsIndexRouteImport } from './routes/_main/notifications/index'
import { Route as MainArticlesIndexRouteImport } from './routes/_main/articles/index'
import { Route as MainArticlesAddIndexRouteImport } from './routes/_main/articles/add.index'
import { Route as MainArticlesArticalIdEditRouteImport } from './routes/_main/articles/$articalId/edit'

const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRouteRoute = MainRouteRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const MainIndexRoute = MainIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const MainProfileRoute = MainProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainAboutRoute = MainAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainSlidersIndexRoute = MainSlidersIndexRouteImport.update({
  id: '/sliders/',
  path: '/sliders/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainOwnerIndexRoute = MainOwnerIndexRouteImport.update({
  id: '/owner/',
  path: '/owner/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainNotificationsIndexRoute = MainNotificationsIndexRouteImport.update({
  id: '/notifications/',
  path: '/notifications/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainArticlesIndexRoute = MainArticlesIndexRouteImport.update({
  id: '/articles/',
  path: '/articles/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainArticlesAddIndexRoute = MainArticlesAddIndexRouteImport.update({
  id: '/articles/add/',
  path: '/articles/add/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainArticlesArticalIdEditRoute =
  MainArticlesArticalIdEditRouteImport.update({
    id: '/articles/$articalId/edit',
    path: '/articles/$articalId/edit',
    getParentRoute: () => MainRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRouteRouteWithChildren
  '/about': typeof MainAboutRoute
  '/profile': typeof MainProfileRoute
  '/auth/login': typeof AuthLoginRoute
  '/': typeof MainIndexRoute
  '/articles': typeof MainArticlesIndexRoute
  '/notifications': typeof MainNotificationsIndexRoute
  '/owner': typeof MainOwnerIndexRoute
  '/sliders': typeof MainSlidersIndexRoute
  '/articles/$articalId/edit': typeof MainArticlesArticalIdEditRoute
  '/articles/add': typeof MainArticlesAddIndexRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRouteRouteWithChildren
  '/about': typeof MainAboutRoute
  '/profile': typeof MainProfileRoute
  '/auth/login': typeof AuthLoginRoute
  '/': typeof MainIndexRoute
  '/articles': typeof MainArticlesIndexRoute
  '/notifications': typeof MainNotificationsIndexRoute
  '/owner': typeof MainOwnerIndexRoute
  '/sliders': typeof MainSlidersIndexRoute
  '/articles/$articalId/edit': typeof MainArticlesArticalIdEditRoute
  '/articles/add': typeof MainArticlesAddIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_main': typeof MainRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/_main/about': typeof MainAboutRoute
  '/_main/profile': typeof MainProfileRoute
  '/auth/login': typeof AuthLoginRoute
  '/_main/': typeof MainIndexRoute
  '/_main/articles/': typeof MainArticlesIndexRoute
  '/_main/notifications/': typeof MainNotificationsIndexRoute
  '/_main/owner/': typeof MainOwnerIndexRoute
  '/_main/sliders/': typeof MainSlidersIndexRoute
  '/_main/articles/$articalId/edit': typeof MainArticlesArticalIdEditRoute
  '/_main/articles/add/': typeof MainArticlesAddIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/about'
    | '/profile'
    | '/auth/login'
    | '/'
    | '/articles'
    | '/notifications'
    | '/owner'
    | '/sliders'
    | '/articles/$articalId/edit'
    | '/articles/add'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/about'
    | '/profile'
    | '/auth/login'
    | '/'
    | '/articles'
    | '/notifications'
    | '/owner'
    | '/sliders'
    | '/articles/$articalId/edit'
    | '/articles/add'
  id:
    | '__root__'
    | '/_main'
    | '/auth'
    | '/_main/about'
    | '/_main/profile'
    | '/auth/login'
    | '/_main/'
    | '/_main/articles/'
    | '/_main/notifications/'
    | '/_main/owner/'
    | '/_main/sliders/'
    | '/_main/articles/$articalId/edit'
    | '/_main/articles/add/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  MainRouteRoute: typeof MainRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_main/profile': {
      id: '/_main/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof MainProfileRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/about': {
      id: '/_main/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof MainAboutRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/sliders/': {
      id: '/_main/sliders/'
      path: '/sliders'
      fullPath: '/sliders'
      preLoaderRoute: typeof MainSlidersIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/owner/': {
      id: '/_main/owner/'
      path: '/owner'
      fullPath: '/owner'
      preLoaderRoute: typeof MainOwnerIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/notifications/': {
      id: '/_main/notifications/'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof MainNotificationsIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/articles/': {
      id: '/_main/articles/'
      path: '/articles'
      fullPath: '/articles'
      preLoaderRoute: typeof MainArticlesIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/articles/add/': {
      id: '/_main/articles/add/'
      path: '/articles/add'
      fullPath: '/articles/add'
      preLoaderRoute: typeof MainArticlesAddIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/articles/$articalId/edit': {
      id: '/_main/articles/$articalId/edit'
      path: '/articles/$articalId/edit'
      fullPath: '/articles/$articalId/edit'
      preLoaderRoute: typeof MainArticlesArticalIdEditRouteImport
      parentRoute: typeof MainRouteRoute
    }
  }
}

interface MainRouteRouteChildren {
  MainAboutRoute: typeof MainAboutRoute
  MainProfileRoute: typeof MainProfileRoute
  MainIndexRoute: typeof MainIndexRoute
  MainArticlesIndexRoute: typeof MainArticlesIndexRoute
  MainNotificationsIndexRoute: typeof MainNotificationsIndexRoute
  MainOwnerIndexRoute: typeof MainOwnerIndexRoute
  MainSlidersIndexRoute: typeof MainSlidersIndexRoute
  MainArticlesArticalIdEditRoute: typeof MainArticlesArticalIdEditRoute
  MainArticlesAddIndexRoute: typeof MainArticlesAddIndexRoute
}

const MainRouteRouteChildren: MainRouteRouteChildren = {
  MainAboutRoute: MainAboutRoute,
  MainProfileRoute: MainProfileRoute,
  MainIndexRoute: MainIndexRoute,
  MainArticlesIndexRoute: MainArticlesIndexRoute,
  MainNotificationsIndexRoute: MainNotificationsIndexRoute,
  MainOwnerIndexRoute: MainOwnerIndexRoute,
  MainSlidersIndexRoute: MainSlidersIndexRoute,
  MainArticlesArticalIdEditRoute: MainArticlesArticalIdEditRoute,
  MainArticlesAddIndexRoute: MainArticlesAddIndexRoute,
}

const MainRouteRouteWithChildren = MainRouteRoute._addFileChildren(
  MainRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  MainRouteRoute: MainRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
